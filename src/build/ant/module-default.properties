### Generic build configuration for modules.

### Changes to this file will affect ALL MODULES, so you probably don't want
### to edit it.  Instead, place overrides for individual properties in
### MODULE_DIR/module.properties.

### This file will be loaded AFTER module-specific defines are loaded from 
### MODULE_DIR/module.properties; see build-module.xml for details.

##############################################################################
### OPTIONAL MODULE PROPERTIES
### 
### The following properties MAY be defined in module.properties to configure
### the behavior of the module build.

### default build target.  can be overridden to only execute part of the build,
### e.g. doc generation or unit tests.
module.target = all

### includes / excludes relative to module config dir that are included in the archive
module.meta.includes = **/*
module.meta.excludes = filters/**,tomcat/**

### includes relative to the source dir to be packaged with the classfiles
module.resource.includes=**/*.properties,**/*.xml

### file pattern in the config directory that is excluded from ant token filtering
module.filter.excludes = **/*.gif,**/*.jpg,**/*.png,**/*.ico,\
						 **/*.data,**/*.backup,**/*.xls,\
						 **/*.jar,**/*.bmp,**/*.db,**/*.GIF,\
						 **/*.mso,**/*.wmz,**/*.class

### set to false to disable publish of sources jar
module.jar.include.source = true

### set to false to disable automatic packaging of dependency libraries into WEB-INF/lib
module.war.include.deps = true

### the name of the ivy library configuration for retrieving WAR/EAR deps.
### usually 'default' is fine, but projects that support multiple target
### appservers may need to adjust dependencies accordingly.
module.dependency.conf=default

#switch to 'true' when unit tests are at 100% passing and should stay that way
test.require.success = false

##############################################################################
### STANDARD BUILD PROPERTIES
###
### most applications will not need to / should not override settings below this point.

### various path names used by the build.

conf.dir  = ${module.dir}/src/main/resources
src.dir   = ${module.dir}/src/main/java
docs.dir  = ${module.dir}/src/documentation
test.dir  = ${module.dir}/src/test
test.src.dir = ${test.dir}/java
test.conf.dir = ${test.dir}/resources

### uncomment and set to 'true' to disable module compilation
#module.skip.build=false

#target language level for the compiler
module.java.version = 1.5
module.java.compiler = ${java.home}/bin/javac

### output directories.
build.root = ${basedir}/build
integration.dir = ${build.root}/ivyrep
build.dir = build/${module.dir}
build.classes = ${build.dir}/classes
build.dist    = ${build.dir}/dist
build.docs	  = ${build.dir}/docs
build.docs.api	  = ${build.docs}/api
build.stage	  = ${build.dir}/stage

#set to "offline" to disable communication with the ivy repository
build.mode = online

test.root        = ${build.dir}/test
test.classes     = ${test.root}/classes
test.config		 = ${test.root}/config
test.tmp         = ${test.root}/tmp
test.gen.src     = ${test.root}/src

#working directory for tests, override if staging environment is necessary
test.stage.dir	 = ${build.dir}

# set to "*Test.java" to test all junit tests 
# other patterns could be used to define different junit test sets
# comma- or space-separated list of patterns of files that must be included
test.includes.pattern = **/*Test.java
# by default, we run performance tests separately, without code coverage enabled.
test.excludes.pattern = **/*PerformanceTest.java

# Defines which junit tests are run in "performance mode; ie. with code coverage disabled.
perftest.includes.pattern = **/*PerformanceTest.java
perftest.excludes.pattern = 

#comment out or set to false to disable coverage reports
test.coverage	 = true
test.coverage.classes = ${test.root}/instrumented
test.coverage.data = ${build.dir}/cobertura.ser
test.coverage.src = ${src.dir}
#change to 'perTest' to run each test in a separate process for maximum paranoia
test.fork.mode     = perBatch

#unit test JPDA settings
test.debug.enable = false
test.debug.port    = 32078
test.debug.suspend = n
test.debug.config  = transport=dt_socket,server=y,suspend=${test.debug.suspend},address=${test.debug.port}
test.debug.args    = -Xdebug -Xrunjdwp:${test.debug.config}

#maximum VM heap space for junit test runs.
test.max.memory  = 1024m

reports.dir      = ${build.dir}/reports
reports.test     = ${reports.dir}/test
reports.xml.dir  = ${reports.test}/xml
reports.html.dir = ${reports.test}/html

reports.coverage = ${reports.dir}/coverage
reports.coverage.html.dir = ${reports.coverage}/html

reports.depend   		   = ${reports.dir}/depend
reports.depend.graphml.dir = ${reports.depend}/graphml

#JavaDoc window title
module.docs.api.title = ${ivy-module.info.module} v${ivy-module.info.revision} API Documentation

### override in module.properties to affect the build manifest
### overridden by wrapper build script if applicable
module.status = milestone
module.build.number = SNAPSHOT

### Ivy 2.0 integration settings for our module build.  

#dependency configuration is stored in an ivy descriptor for each module.
#override this value in ${module.dir}/module.properties if a different file
#is required.

ivy.dep.file=${module.dir}/ivy.xml

#the revision number to be published when the build is done.  default is
#simply to load the value from the ivy xml descriptor.
ivy.report.todir = ${reports.depend.graphml.dir}
ivy.status = ${module.status}
ivysettings.file = ${scripts.dir}/ivysettings.xml
