<?xml version="1.0"?>

<project name="build-module" default="all"
		 xmlns:ivy="antlib:org.apache.ivy.ant">

	<description><![CDATA[
Module build, which loads dependency libraries via Ivy and adds them to this
module's compile and test classpaths prior to compilation.

This script is not designed to be invoked directly, but by build-master.xml,
once for each module in the project.
	]]></description>

	<property name="local.properties" value="${basedir}/local.properties"/>
	<property file="${local.properties}"/>
	
	<dirname property="scripts.dir" file="${ant.file.build-module}"/>
	<property name="default.properties" value="${scripts.dir}/module-default.properties"/>

	<!-- load ivy version information into our property namespace -->
	<property name="ivy.dep.file" value="${module.dir}/ivy.xml"/>
	<xmlproperty file="${ivy.dep.file}" collapseattributes="true"/>
	
	<!-- now load all of the other properties that are computed from the above information -->
	<property file="${project.properties}"/>
	<property file="${default.properties}"/>

    <!-- if the module defines multiple publications, parse out the first one for packaging -->
    <propertyregex input="${ivy-module.publications.artifact.name}"
                    property="module.archive.name"
                    regexp="^([^,]+),.*"
                    select="\1"/>
    <propertyregex input="${ivy-module.publications.artifact.type}"
                   property="module.archive.extension"
                   regexp="^([^,]+),.*"
                   select="\1"/>
	<property name="module.archive.file" value="${module.archive.name}.${module.archive.extension}"/>
	
	<!-- startup ivy and load common task libraries and macros -->
	<import file="${scripts.dir}/build-common.xml"/>

	<!-- classpath will be dynamically computed from dependencies using ivy -->
	<path id="module.class.path"/>
	<!-- test classpath will be dynamically computed from dependencies using ivy -->
	<path id="module.test.path"/>

	<target name="all" 
			depends="init,depend,compile,package,compile-tests,test,report,-assert-success"
			description="resolves dependencies, compiles, tests, and packages the project">
	</target>

	<target name="-check-clean" description="test whether there are preexisting build files to clean up">
		<condition property="-do-clean" value="true">
			<available file="${build.dir}"/>
		</condition>
	</target>

	<target name="clean" depends="-check-clean" if="-do-clean"
			description="deletes prior build and test products">
		<delete>
			<fileset dir="${build.dir}" includes="**/*"/>
		</delete>
	</target>

	<target name="init"
			description="initializes the build staging area">

<echo>**************************************************
*
*  Building ${ivy-module.info.module}
*
**************************************************
</echo>

		<mkdir dir="${build.root}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.dist}/jars"/>
		<mkdir dir="${build.dist}/sources"/>
		<mkdir dir="${build.stage}"/>
		<mkdir dir="${build.stage}/lib"/>
		<mkdir dir="${test.tmp}"/>
		<mkdir dir="${test.classes}"/>
		<mkdir dir="${test.config}"/>
		<mkdir dir="${test.coverage.classes}"/>
		<mkdir dir="${reports.xml.dir}"/>
		<mkdir dir="${reports.html.dir}"/>
		<mkdir dir="${reports.coverage}"/>
		<mkdir dir="${reports.coverage.html.dir}"/>
		<mkdir dir="${reports.depend.graphml.dir}"/>

	</target>

	<target name="depend"
			description="resolve all dependencies of this module, and update the
						 project classpath to include all dependency archives">
		<ivy:resolve/>
	
		<ivy:cachepath pathid="module.class.path" conf="compile"/>
		<ivy:cachepath pathid="module.test.path" conf="test"/>
	</target>

	<target name="compile" description="compiles java sources">
		<if>
			<available file="${src.dir}"/>
			<then>
				<!-- we rely on ivy to compute the classpath -->
				<javac fork="on"
						executable="${module.java.compiler}"
						target="${module.java.version}" 
						source="${module.java.version}" 
						debug="on" destdir="${build.classes}" 
						classpathref="module.class.path">
					<src path="${src.dir}"/>
				</javac>
				<!-- copy classpath resources into the output folder -->
				<copy todir="${build.classes}">
					<fileset dir="${src.dir}" includes="${module.resource.includes}"/>
				</copy>
			</then>
		</if>
	</target>

	<target name="instrument"
			description="instrument application classes for test code coverage analysis">
		<cobertura-instrument todir="${test.coverage.classes}" datafile="${build.dir}/cobertura.ser">
			<ignore regex="org.apache.log4j.*" />
			<fileset dir="${build.classes}"/>
		</cobertura-instrument>
	</target>

	<target name="compile-tests" depends="depend,compile">
		<javac srcdir="${test.src.dir}" debug="on" 
			   target="${module.java.version}" 
			   source="${module.java.version}" 
			   destdir="${test.classes}">
			<classpath>
				<path refid="module.test.path"/>
				<pathelement location="${build.classes}"/>
				<!-- we need to have the depend task executed first for this to be set properly -->
				<path refid="module.class.path"/>
				<pathelement location="${conf.dir}"/>
				<path refid="task.class.path"/>
			</classpath>
		</javac>
		<copy todir="${test.classes}">
			<fileset dir="${test.src.dir}" includes="**/*.properties,**/*.xml"/>
		</copy>
		<copy todir="${test.config}" failonerror="false">
			<fileset dir="${test.conf.dir}" />			
		</copy>
	</target>

	<target name="test" depends="compile-tests,instrument" description="runs unit tests">

		<if>
			<istrue value="${test.debug.enable}"/>
			<then><property name="_test.debug.args" value="${test.debug.args}"/></then>
			<else><property name="_test.debug.args" value=""/></else>
		</if>
	
		<junit dir="${test.stage.dir}" fork="on" forkMode="${test.fork.mode}" 
			   showoutput="true" failureproperty="test.failed" errorproperty="test.failed" maxmemory="${test.max.memory}">

			<jvmarg line="${_test.debug.args}"/>
			
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${build.dir}/cobertura.ser" />
			<!-- useful if unit tests include JSP compilation, to prevent cached JSP classes from interfering with future unit tests -->
			<sysproperty key="java.io.tmpdir" file="${test.tmp}"/>

			<classpath>

				<pathelement location="${test.classes}"/>
				<pathelement location="${test.conf.dir}"/>
				<pathelement location="${test.src.dir}"/>
				<path refid="module.test.path"/>

				<pathelement location="${test.coverage.classes}"/>
				<pathelement location="${test.tmp}"/>
				<pathelement location="${build.classes}" />

				<pathelement location="${conf.dir}"/>
				<pathelement location="${web.dir}"/>
				<pathelement location="${db.dir}"/>
				<path refid="task.class.path"/>
				
				<pathelement location="${test.stage.dir}"/>

			</classpath>

			<formatter type="xml" />

			<batchtest todir="${reports.xml.dir}" unless="test.suite">
				<fileset dir="${test.src.dir}">
					<include name="${test.includes.pattern}" />
					<exclude name="${test.excludes.pattern}" />
				</fileset>
			</batchtest>
			<test todir="${reports.xml.dir}" if="test.suite"
				  name="${test.suite}">
			</test>

		</junit>
	
		<junit dir="${test.stage.dir}" fork="on" forkMode="${test.fork.mode}" 
			   showoutput="true" failureproperty="test.failed" errorproperty="test.failed" maxmemory="${test.max.memory}">
	
			<jvmarg value="-Xdebug"/>
			<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=${test.debug.suspend},address=${test.debug.port}"/>
	
			<!-- useful if unit tests include JSP compilation, to prevent cached JSP classes from interfering with future unit tests -->
			<sysproperty key="java.io.tmpdir" file="${test.tmp}"/>
	
			<classpath>
	
				<pathelement location="${test.classes}"/>
				<pathelement location="${test.conf.dir}"/>
				<pathelement location="${test.src.dir}"/>
				<path refid="module.test.path"/>
	
				<pathelement location="${test.tmp}"/>
				<pathelement location="${build.classes}" />
	
				<pathelement location="${conf.dir}"/>
				<pathelement location="${web.dir}"/>
				<pathelement location="${db.dir}"/>
				<path refid="task.class.path"/>
	
			</classpath>
	
			<formatter type="xml" />
	
			<batchtest todir="${reports.xml.dir}" unless="test.suite">
				<fileset dir="${test.src.dir}">
					<include name="${perftest.includes.pattern}" />
					<exclude name="${perftest.excludes.pattern}" />
				</fileset>
			</batchtest>
	
		</junit>
	</target>

	<target name="coverage-report">
		<cobertura-report destdir="${reports.coverage.html.dir}" datafile="${build.dir}/cobertura.ser">
			<fileset dir="${src.dir}">
				<include name="**/*.java"/>
			</fileset>
		</cobertura-report>
	</target>

	<target name="depend-report" depends="depend"
			description="generates an Ivy dependency graph for this module">
		<ivy:report/>
		<!-- canonicalize the name of the default dependency report so it's easier to find -->
		<copy tofile="${reports.depend.graphml.dir}/index.html"
			  file="${reports.depend.graphml.dir}/${ivy-module.info.organisation}-${ivy-module.info.module}-default.html" 
			  failonerror="false"/>
	</target>

	<target name="junit-report">
		<junitreport todir="${reports.xml.dir}">
			<fileset dir="${reports.xml.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${reports.html.dir}" />
		</junitreport>
	</target>

	<target name="report" depends="junit-report,coverage-report,depend-report"
			description="generates dependency, unit test, code coverage reports">
	</target>

	<target name="package" description="select, stage, and build the desired archive"
			depends="compile,compile-tests,jar">

		<jar destfile="${build.dist}/jars/${module.archive.name}-test.jar" update="true">
			<fileset dir="${test.classes}" includes="**/*"/>
			<manifest>
				<attribute name="Specification-Title" value="${ivy-module.info.module}"/>
				<attribute name="Specification-Vendor" value="Mantis Technology Group, Inc."/>
				<attribute name="Specification-Version" value="${ivy-module.info.revision}"/>
				<attribute name="Implementation-Vendor" value="Mantis Technology Group, Inc."/>
				<attribute name="Implementation-Version" value="${ivy-module.info.revision}"/>
				<attribute name="Created-On" value="${touch.time}"/>
			</manifest>
		</jar>
		
		<!-- publish the generated archive into the temporary repository,
			 where it can be found by other sub-module builds -->
		<ivy:publish resolver="build" overwrite="true"
					 pubrevision="${ivy-module.info.revision}">
			<artifacts pattern="${build.dist}/[type]s/[artifact].[ext]" />
		</ivy:publish>
	</target>

	<target name="jar" description="packages module jar archive">

		<mkdir dir="${conf.dir}"/>

		<jar destfile="${build.dist}/jars/${module.archive.file}" update="true">
			<fileset dir="${conf.dir}" includes="${module.meta.includes}" excludes="${module.meta.excludes}"/>
			<fileset dir="${build.classes}" includes="**/*"/>
			<manifest>
				<attribute name="Specification-Title" value="${ivy-module.info.module}"/>
				<attribute name="Specification-Vendor" value="Mantis Technology Group, Inc."/>
				<attribute name="Specification-Version" value="${ivy-module.info.revision}"/>
				<attribute name="Implementation-Vendor" value="Mantis Technology Group, Inc."/>
				<attribute name="Implementation-Version" value="${ivy-module.info.revision}"/>
				<attribute name="Created-On" value="${touch.time}"/>
			</manifest>
		</jar>
		
		<!-- also generate a source jar if requested -->
		<if>
			<equals arg1="${module.jar.include.source}" arg2="true"/>
			<then>
				<jar destfile="${build.dist}/sources/${module.archive.file}" update="true">
					<fileset dir="${src.dir}" includes="**/*"/>
				</jar>
			</then>
		</if>
	</target>

	<target name="-assert-success" description="fail the build if the tests failed" if="test.failed">
		<if>
			<and>
				<equals arg1="${test.require.success}" arg2="true"/>
				<isset property="test.failed"/>
			</and>
			<then>
				<fail message="tests have failed"/>
			</then>
		</if>
	</target>
	
</project>
