==BeetNG==

BeetNG is a fork of [http://beet.sf.net beet] a sourceforge hosted Java/Spring-based application behavior and performance data recording tool.

As Beet seems no longer maintained by its original authors, this fork was started. The main objectives are:
* fix and add support for newer versions of Spring (3.0 and 3.1)
* add new data persisters
* add tools to ease data analysis
* implement a VisualVM integration
* add JEE6 support


===Original description===

''This is the original description of the tool, as extracted from the sourceforge website.''

Beet records user behavior and performance data for your [http://www.springframework.org Spring]-based Java application. 
It can thus help you to analyze usage patterns and research production performance issues.
Beet requires Spring Framework 2.0 or 2.5.

Visit the Downloads page to grab a copy, take the tutorial, and/or read the Quick Start chapter of the User Guide to enable it in your application.

Beet is freely available to use under the terms of the [http://www.mozilla.org/MPL/MPL-1.1.html Mozilla Public License, v1.1]. 
It was developed and is maintained by [http://beet.sourceforge.net/about-us Mantis Technology Group, Inc].

Features
* Record Java method calls, SQL statements, and HTTP requests, or add your own events
* Simple configuration, zero code modification required
* Know immediately which user and session caused each event and when
* JMX performance tracking and administration
* Record data as XML, compressed binary XML, directly to an RDBMS, or write your own storage
* Flexible ETL and log manipulation tools for compressed binary XML
* Low resource overhead, appropriate for production systems

===Todo list===
* <del>move all modules to maven build</del>
* <del>remove all eclipse, ivy and easyant files</del>
* <del>add beet-hello.war to distribution</del>
* implement the xsd to docbook transformation
* <del>fix examples list in tutorial</del>
* create an abstraction on the logging library to remove mandatory dependency
* split core codebase from spring dependencies
* create a spring based integration
* create dedicated module for web jee implementation
* create dedicated modules for persisters implementations
* create new module for visualvm realtime monitoring
* add new statistics module
* add support for servlet 3.0 api with automatic servlet configuration
* refactor the suspend mode to reduce to the maximum the beet cpu usage (don't create event, don't convert method args, etc...)
