<?xml version="1.0"?>

<project name="net.sourseforge.beet#beet" xmlns:ivy="antlib:org.apache.ivy.ant"
		 xmlns:ea="antlib:org.apache.easyant">

	<fileset id="licenses" dir="${basedir}">
		<include name="notice.txt"/>
		<include name="changelog.txt"/>
		<include name="licenses/*.txt"/>
	</fileset>
	
	<property name="local.properties" value="local.properties"/>
	<property file="${local.properties}"/>

	<property name="scripts.dir" location="${basedir}/src/build/ant"/>
	<property name="target.dir" location="target/release"/>

	<property name="project.ivy.settings.file" value="${scripts.dir}/ivysettings.xml"/>
	<property name="test.run.forkmode" value="once"/>
	
	<ea:import mrid="org.apache.easyant.buildtypes#meta-build;0.2"/>
	<ea:include mrid="org.apache.easyant.plugins#antcontrib-activator;0.1" as="ac" />
		
	<phase name="distribution" depends="validate" description="create a distribution package"/>
	
	<macrodef name="bundle" 
			  description="Generate tar.gz, tar.bz2, zip, and corresponding MD5 hash files for a release directory">

		<attribute name="basename" description="Base name for the generated archives, without extensions"/>
		<element name="contents" description="nested filesets to include in generated archives" implicit="true" optional="false"/>

		<sequential>

			<zip file="@{basename}.zip">
				<contents/>
			</zip>
			<checksum file="@{basename}.zip"/>
			
			<tar destfile="@{basename}.tar.gz" compression="gzip">
				<contents/>
			</tar>
			<checksum file="@{basename}.tar.gz"/>

			<tar destfile="@{basename}.tar.bz2" compression="bzip2">
				<contents/>
			</tar>
			<checksum file="@{basename}.tar.bz2"/>
			
		</sequential>
		
	</macrodef>
	
	<macrodef name="ivy-fetch">
		
		<attribute name="ivy"/>
		<attribute name="confs"/>
		<attribute name="destdir"/>
		
		<sequential>
			
			<mkdir dir="@{destdir}" />
			<ivy:resolve file="@{ivy}" conf="@{confs}" settingsRef="project.ivy.instance"/>
			<ivy:retrieve pattern="@{destdir}/[artifact]-[revision].[ext]" settingsRef="project.ivy.instance" conf="@{confs}" sync="true"/>
			
		</sequential>
		
	</macrodef>
	
	<target name="clean-repository" phase="clean">
		<delete dir="${basedir}/repository"/>
	</target>
	
	<target name="package-release" phase="distribution" depends="validate" description="package a new public release for upload to SF">

		<ivy:info organisation="net.sourceforge.beet" module="beet-core" revision="latest.integration"  settingsRef="project.ivy.instance"/>
		<var name="release.revision" value="${ivy.revision}"/>

		<!-- create separate distributions for java 5 and 6 -->
		<for list="5,6" param="current.version">
			<sequential>
				<var name="release.confs" value="1.@{current.version}"/>
				
				<!-- create staging area for gathering some files to archive. -->
				<var name="release.dir" value="${target.dir}/java@{current.version}"/>
				<mkdir dir="${release.dir}"/>

				<!-- retrieve licenses -->
				<copy todir="${release.dir}">
					<fileset refid="licenses"/>
				</copy>
				
				<!-- retrieve core dependency jars into release directory -->
				<ivy-fetch ivy="${basedir}/core/module.ivy" destdir="${release.dir}/lib" confs="${release.confs}"/>
				
				<!-- retrieve any extra libraries required by beet-utils -->
				<ivy-fetch ivy="${basedir}/utils/module.ivy" destdir="${release.dir}/tmp" confs="${release.confs}"/>
				
				<!-- eliminate duplicate dependencies between beet-core and beet-utils -->
				<copy todir="${release.dir}/utils">
					<fileset dir="${release.dir}/tmp" includes="*.jar" excludes="beet-core*">
						<present present="srconly" targetdir="${release.dir}/lib"/>
					</fileset>
				</copy>
				<delete dir="${release.dir}/tmp"/>
				
				<!-- update the utils jar classpath to reflect the distro layout -->
				<var name="utils.class.path" unset="true"/>
				<manifestclasspath property="utils.class.path" jarfile="${release.dir}/beet-utils.jar">
					<classpath>
						<fileset dir="${release.dir}">
							<include name="beet-core.jar"/>
							<include name="lib/*.jar"/>
							<include name="utils/*.jar"/>
						</fileset>
					</classpath>
				</manifestclasspath>
				<jar update="true" destfile="${release.dir}/beet-utils.jar">
					<manifest>
						<attribute name="Class-Path" value="${utils.class.path}"/>
					</manifest>
				</jar>

				<var name="prefix" value="beet-${release.revision}"/>
				<bundle basename="${target.dir}/beet-java@{current.version}-${release.revision}">
					
					<!-- include core jars -->
					<tarfileset prefix="${prefix}" dir="core/target/artifacts" includes="*.jar" excludes="*test*,*source*"/>

					<!-- include dependency jars, licenses, and utils jar-->
					<tarfileset prefix="${prefix}" dir="${release.dir}" includes="**/*"/>
					
					<!-- include SQL scripts -->
					<tarfileset prefix="${prefix}" dir="core/src/main" includes="sql/**"/>
					<tarfileset prefix="${prefix}" dir="utils/src/main" includes="sql/**"/>

					<!-- include executable shell scripts -->
					<tarfileset prefix="${prefix}" filemode="755" dir="utils/src/main/sh" includes="**/*"/>
					
					<!-- include the webapp compatibility jar -->
					<tarfileset prefix="${prefix}/web" dir="integration/web/target/artifacts" includes="**/*.jar"/>
					
					<!-- include source jars, to be neighborly. -->
					<tarfileset prefix="${prefix}/src" dir="core/target/artifacts" includes="*source*"/>
					<tarfileset prefix="${prefix}/src" dir="utils/target/artifacts" includes="*source*"/>
					
					<!-- include documentation -->
					<tarfileset prefix="${prefix}/docs/userguide" dir="core/target/documentation" includes="html/**"/>
					<tarfileset prefix="${prefix}/docs/api/core" dir="core/target/report/javadoc/main" includes="**/*"/>
					<tarfileset prefix="${prefix}/docs/api/utils" dir="utils/target/report/javadoc/main" includes="**/*"/>

				</bundle>
				
			</sequential>
		</for>
	</target>

	<target name="package-reports" phase="distribution" description="package build reports and documentation for a project web site update">

		<tar destfile="${target.dir}/reports.tar.bz2" compression="bzip2">
			<tarfileset prefix="build/core" dir="core/target">
				<include name="report/deps-report/**"/>
				<include name="report/coverage/**"/>
				<include name="test/html/**"/>
			</tarfileset>
			<tarfileset prefix="build/utils" dir="utils/target">
				<include name="report/deps-report/**"/>
				<include name="report/coverage/**"/>
				<include name="test/html/**"/>
			</tarfileset>
			<tarfileset prefix="build/docs" dir="target/release/java6/docs">
				<include name="**/*"/>
			</tarfileset>
		</tar>
		
	</target>

	<target name="maven-repository" phase="distribution" description="generate maven packaging artifacts from the local ivy repository">

		<for param="module.ivy.file">
			<fileset dir="repository" includes="**/*.ivy"/>
			<sequential>

				<!-- compute destination path for pom file -->
				<var name="maven.artifact.dir" unset="true"/>
				<var name="module.name" unset="true"/>

				<basename file="@{module.ivy.file}" suffix=".ivy" property="module.name"/>
				<dirname file="@{module.ivy.file}" property="maven.artifact.dir"/>

				<var name="pom.file" value="${maven.artifact.dir}/${module.name}.pom"/>

				<!-- generate pom -->
				<ivy:makepom pomfile="${pom.file}" ivyfile="@{module.ivy.file}"
							 headerfile="${scripts.dir}/license-header.txt"
							 settingsRef="project.ivy.instance">
					<mapping conf="1.5, 1.6, default, compile, test" scope="runtime" />
					<mapping conf="compile, test" scope="compile" />
					<mapping conf="test" scope="test"/>
				</ivy:makepom>

				<!-- generate hashes -->
				<checksum file="${pom.file}" todir="${maven.artifact.dir}" algorithm="MD5" fileext=".md5"/>
				<checksum file="${pom.file}" todir="${maven.artifact.dir}" algorithm="SHA" fileext=".sha1"/>

			</sequential>
		</for>
			
	</target>
	
</project>