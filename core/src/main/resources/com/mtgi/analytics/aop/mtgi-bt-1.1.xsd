<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<xsd:schema xmlns="http://www.mantis-tgi.com/schema/bt/1.1"
		xmlns:xsd="http://www.w3.org/2001/XMLSchema"
		xmlns:beans="http://www.springframework.org/schema/beans"
		xmlns:tool="http://www.springframework.org/schema/tool"
		xmlns:bt="http://www.mantis-tgi.com/schema/bt/1.1"
		targetNamespace="http://www.mantis-tgi.com/schema/bt/1.1"
		elementFormDefault="qualified"
		attributeFormDefault="unqualified">

	<xsd:import namespace="http://www.springframework.org/schema/beans"/>
	<xsd:import namespace="http://www.springframework.org/schema/tool"/>

	<xsd:annotation>
		<xsd:documentation><![CDATA[
		Import this schema into your Spring beans definition file (namespace http://www.springframework.org/schema/beans)
		to configure behavior tracking.
		]]></xsd:documentation>
	</xsd:annotation>

	<xsd:element name="config">
		<xsd:annotation>
			<xsd:documentation><![CDATA[
		Container for behavior tracking elements in a Spring configuration
		file.  <bt:config> is "syntactic sugar" within a Spring bean
		configuration file and is entirely optional; you can include any of
		its allowed child elements directly in the file instead.
		
		Typically a <bt:config> element will contain one or more <bt:manager> elements.  Most
		applications will only need one <bt:manager> definition.  Other elements like <bt:xml-persister>
		and <bt:session-context> will usually appear as children of a <bt:manager> element.
		It is useful to include them directly under <bt:config> when you want to make them
		public for injection into application beans that are not part of the behavior
		tracking framework, or if you have multiple <bt:manager> tags that share a persister,
		and so on.
			]]></xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element ref="manager"/>
					<xsd:element ref="session-context"/>
					<xsd:element ref="persister-chain"/>
					<xsd:element ref="xml-persister"/>
					<xsd:element ref="jdbc-persister"/>
					<xsd:element ref="mbean-persister"/>
					<xsd:element ref="custom-persister"/>
				</xsd:choice>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	 
	<xsd:element name="manager">
		<xsd:annotation>
			<xsd:documentation source="java:com.mtgi.analytics.BehaviorTrackingManager"><![CDATA[
	This is the fundamental element required to enable behavior tracking in an application:
	method call tracking, HTTP request tracking, and JDBC tracking all require this element
	to appear in Spring configuration.
	
	If no "id" attribute is specified, the implicit name "defaultTrackingManager" is assumed.  If there is
	more than one <bt:manager> defined, you must define a unique "id" value for each.
			]]></xsd:documentation>
			<xsd:appinfo>
				<tool:annotation>
					<tool:exports type="com.mtgi.analytics.BehaviorTrackingManagerImpl"/>
				</tool:annotation>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="beans:identifiedType">
					<xsd:sequence>
						<xsd:choice minOccurs="0">
							<xsd:element ref="bt:persister-chain">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
									Configure a multiple persisters for this manager.
									]]></xsd:documentation>
								</xsd:annotation>
							</xsd:element>
							<xsd:element ref="bt:xml-persister">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
									Configure XML logging for this manager.  This is the default logging type if none is
									specified, so this is only necessary if you want to change any of the defaults, e.g.
									specify log file location or change the log rotation schedule.
									]]></xsd:documentation>
								</xsd:annotation>
							</xsd:element>
							<xsd:element ref="bt:jdbc-persister">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
									Configure JDBC logging for this manager.
									]]></xsd:documentation>
								</xsd:annotation>
							</xsd:element>
							<xsd:element ref="bt:mbean-persister">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
									Configure JMX monitoring for this manager.  Event statistics are
									aggregated in MBeans, where they can be viewed from a JMX console for
									monitoring quality-of-service.
									]]></xsd:documentation>
								</xsd:annotation>
							</xsd:element>
							<xsd:element ref="bt:custom-persister">
								<xsd:annotation>
									<xsd:documentation><![CDATA[
									Configure a custom BehaviorEventPersister implementation for this manager.
									]]></xsd:documentation>
								</xsd:annotation>
							</xsd:element>
						</xsd:choice>
						<xsd:element ref="session-context" minOccurs="0">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
								Specify the bean name of a SessionContext implementation to use with this BehaviorTrackingManager.
								An alternative to a nested <bt:session-context> element.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="http-requests" minOccurs="0">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
								Activate logging of http requests using this manager.  All parameters are logged unless the 
								"parameters" attribute is specified.  Similarly, all requests are logged, unless one or more 
								"uri-patterns" are specified.
								
								Use of this element requires a servlet container supporting JSP 2.0 and higher, and requires 
								beet.jar to be placed in WEB-INF/lib, not in a shared libraries folder or in an EAR library
								folder.  If you can't use bt:http-requests for these reasons, you must use the 
								BehaviorTrackingFilter servlet filter class instead.
								
								Adding BehaviorTrackingFilter to web.xml achieves almost exactly the same behavior as adding
								<bt:http-requests> to your Spring configuration.  Both methods record HTTP request information
								and parameter values, but only the Filter can log response information such as HTTP return code
								and error information.  <bt:http-requests> is thus simpler to use, while BehaviorTrackingFilter is
								slightly (very slightly) more powerful.
								]]></xsd:documentation>
							</xsd:annotation>
							<xsd:complexType>
								<xsd:sequence>
									<xsd:element name="uri-pattern" type="xsd:string" minOccurs="0" maxOccurs="unbounded">
										<xsd:annotation>
											<xsd:documentation><![CDATA[A regular expression identifying URIs that should be
											logged to the behavior event persister.  The value of HttpServletRequest.getServletURI()
											will be matched against this expression.
											
											This element has equivalent behavior to the uri-pattern attribute, but
											can appear multiple times.
											]]></xsd:documentation>
										</xsd:annotation>
									</xsd:element>
								</xsd:sequence>
								<xsd:attribute name="parameters" type="xsd:string">
										<xsd:annotation>
											<xsd:documentation><![CDATA[If specified, a comma-separated list of request parameters that
											should be logged with behavior events.  If unspecified, all parameters are logged.]]></xsd:documentation>
										</xsd:annotation>
								</xsd:attribute>
								<xsd:attribute name="name-parameters" type="xsd:string">
										<xsd:annotation>
											<xsd:documentation><![CDATA[If specified, a comma-separated list of request parameters that
											should be included as part of the event name.  This is useful if you want to differentiate
											events by key parameter values, rather than by URL alone.  If unspecified, no parameters are 
											included in the event name.]]></xsd:documentation>
										</xsd:annotation>
								</xsd:attribute>
								<xsd:attribute name="uri-pattern" type="xsd:string">
										<xsd:annotation>
											<xsd:documentation><![CDATA[Equivalent to a single nested uri-pattern element, provided
											as an attribute for syntactic convenience.]]></xsd:documentation>
										</xsd:annotation>
								</xsd:attribute>
								<xsd:attribute name="event-type" type="xsd:string">
										<xsd:annotation>
											<xsd:documentation><![CDATA[The value to log for event type when recording http requests.  
											Defaults to "http-request" if unspecified.]]></xsd:documentation>
										</xsd:annotation>
								</xsd:attribute>
							</xsd:complexType>
						</xsd:element>
					</xsd:sequence>
					<xsd:attribute name="application" type="xsd:string" use="required">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
							Arbitrary text string recorded as the "application" attribute of each logged event.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="flush-threshold" type="xsd:int" use="optional">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
							Maximum number of events recorded before data is automatically flushed to the persister.  Default is 100 if unspecified.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="task-executor" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
							Bean name of a task executor for performing event logging operations.  If unspecified, a
							private thread pool is maintained for this purpose.  The default behavior is strongly recommended,
							as unbounded memory growth is possible if events cannot be logged in a timely fashion as they
							are recorded.
							]]></xsd:documentation>
							<xsd:appinfo>
								<tool:annotation kind="ref">
									<tool:expected-type type="org.springframework.core.task.TaskExecutor"/>
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="track-method-expression" type="xsd:string" use="optional">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
							An AspectJ AOP pointcut expression identifying methods that should generate behavior tracking
							events.  This is a simplified alternative to using <bt:advice> in combination with standard
							Spring AOP configuration.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="flush-schedule" default="0 0/5 * * * ?">
						<xsd:annotation>
							<xsd:documentation>Quartz Cron expression describing how often events should be flushed to the persister.
							Default is every 5 minutes if unspecified.</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="register-mbeans" default="false" type="xsd:boolean">
						<xsd:annotation>
							<xsd:documentation>Boolean expression indicating whether JMX mbeans for this manager should be registered
							with the platform MBean Server.  Defaults to false if unspecified.</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="mbean-server" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>When register-mbeans="true", specify a reference to the MBeanServer instance on
							which mbeans should be registered.  Defaults to the platform MBeanServer if unspecified.</xsd:documentation>
							<xsd:appinfo>
								<tool:annotation kind="ref">
									<tool:expected-type type="javax.management.MBeanServer"/>
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="scheduler" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>Bean name of a Quartz scheduler bean to use for timed flush operations.
							If unspecified, a private instance will be created.  The default behavior
							is strongly recommended.</xsd:documentation>
							<xsd:appinfo>
								<tool:annotation kind="ref">
									<tool:expected-type type="org.quartz.Scheduler"/>
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="persister" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation><![CDATA[Bean name of a BehaviorEventPersister implementation defined
							in the applicaton context.  Use in place of a nested persister element (e.g. 
							<bt:xml-persister>, <bt:jdbc-persister>).]]></xsd:documentation>
							<xsd:appinfo>
								<tool:annotation kind="ref">
									<tool:expected-type type="com.mtgi.analytics.BehaviorEventPersister"/>
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="session-context" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation><![CDATA[Bean name of a SessionContext implementation defined
							in the applicaton context.  Use in place of a nested <bt:session-context> element.]]></xsd:documentation>
							<xsd:appinfo>
								<tool:annotation kind="ref">
									<tool:expected-type type="com.mtgi.analytics.SessionContext"/>
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="advice">
		<xsd:complexType>
			<xsd:annotation>
				<xsd:documentation source="java:com.mtgi.analytics.aop.BehaviorTrackingAdvice"><![CDATA[
	Defines an AOP advisor that logs a behavior tracking event for each advised method call.
	Generally you can use the track-method-expression attribute of <bt:manager> to achieve
	the same result; <bt:advice> tags are not strictly necessary.  <bt:advice> is provided for 
	fine-grained  integration of behavior tracking with other AOP advice.  For example, you 
	can control whether behavior tracking events occur inside or outside of transaction boundaries.
				]]></xsd:documentation>
				<xsd:appinfo>
					<tool:annotation>
						<tool:exports type="com.mtgi.analytics.aop.BehaviorTrackingAdvice"/>
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
			
			<xsd:complexContent>
				<xsd:extension base="beans:identifiedType">
					<xsd:attribute name="tracking-manager" type="xsd:string" use="optional">
						<xsd:annotation>
							<xsd:documentation source="java:com.mtgi.analytics.BehaviorTrackingManager"><![CDATA[
	The bean name of the BehaviorTrackingManager instance that is to be used
	to register events.
	
	This attribute is usually optional, only required if there is more than one <bt:manager> defined
	by the application.
							]]></xsd:documentation>
							<xsd:appinfo>
								<tool:annotation kind="ref">
									<tool:expected-type type="com.mtgi.analytics.BehaviorTrackingManager"/>
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
			
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="persister-chain">
		<xsd:annotation>
			<xsd:documentation source="java:com.mtgi.analytics.ChainingEventPersisterImpl"><![CDATA[
 		 	A delegating BehaviorEventPersister that sends events to a list of persisters.
			For example, you can configure both an mbean-persister for JMX statistics monitoring and
			an xml-persister to store raw data.  Normally this element will occur as a child
			of <bt:manager>.
			]]></xsd:documentation>
			<xsd:appinfo>
				<tool:annotation>
					<tool:exports type="com.mtgi.analytics.ChainingEventPersisterImpl"/>
				</tool:annotation>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="beans:identifiedType">
					<xsd:choice minOccurs="0" maxOccurs="unbounded">
						<xsd:element ref="bt:xml-persister">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
								Add an XML logging persister to the chain.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element ref="bt:jdbc-persister">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
								Add a JDBC logging persister to the chain.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element ref="bt:mbean-persister">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
								Add a JMX monitoring persister to the chain.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element ref="bt:custom-persister">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
								Add a custom BehaviorEventPersister implementation to the chain.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element ref="beans:ref">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
								Add a reference by name to a persister bean defined elsewhere in the Spring configuration.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element ref="beans:idref">
							<xsd:annotation>
								<xsd:documentation><![CDATA[
								Add a reference by ID to a persister bean defined elsewhere in the Spring configuration.
								]]></xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:choice>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="xml-persister">
		<xsd:complexType>
			<xsd:annotation>
				<xsd:documentation source="java:com.mtgi.analytics.XmlBehaviorEventPersisterImpl"><![CDATA[
		Defines behavior tracking event persistence to a rotating XML log file.  Support
		is provided for binary XML and GZIP compression.  Generally this element will appear
		as a child of <bt:manager> without an "id", though it is possible to declare it as a top-level
		bean if you want to inject it into other application beans.
				]]></xsd:documentation>
				<xsd:appinfo>
					<tool:annotation>
						<tool:exports type="com.mtgi.analytics.XmlBehaviorEventPersisterImpl"/>
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
			<xsd:complexContent>
				<xsd:extension base="beans:identifiedType">
					<xsd:attribute name="file" default="behavior-tracking.xml" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>Path to XML log file.  Defaults to behavior-tracking.xml in the process working directory.</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="rotate-schedule" default="0 0 0 * * ?" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>Quartz Cron expression for the log file rotation schedule.  Defaults to daily at midnight if unspecified.</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="binary" default="true" type="xsd:boolean">
						<xsd:annotation>
							<xsd:documentation>Enable binary (FastInfoset) XML logging.  Defaults to true.</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="compress" default="true" type="xsd:boolean">
						<xsd:annotation>
							<xsd:documentation>Enable GZIP logfile compression.  Defaults to true.</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="jdbc-persister">
		<xsd:complexType>
			<xsd:annotation>
				<xsd:documentation source="java:com.mtgi.analytics.JdbcBehaviorEventPersisterImpl"><![CDATA[
		Defines behavior tracking event persistence to a JDBC DataSource.  Optional support
		is provided for JDBC batch fetching.  Generally this element will appear
		as a child of <bt:manager> without an "id", though it is possible to declare it as a top-level
		bean if you want to inject it into other application beans.
				]]></xsd:documentation>
				<xsd:appinfo>
					<tool:annotation>
						<tool:exports type="com.mtgi.analytics.JdbcBehaviorEventPersisterImpl"/>
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
			<xsd:complexContent>
				<xsd:extension base="beans:identifiedType">
					<xsd:sequence>
						<xsd:element name="data-source" minOccurs="1" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>Specifies the data source to which events are persisted.</xsd:documentation>
							</xsd:annotation>
							<xsd:complexType>
								<xsd:sequence>
									<xsd:group ref="beans:beanElements"/>
									<xsd:choice minOccurs="0" maxOccurs="1">
										<xsd:element ref="beans:ref"/>
										<xsd:element ref="beans:idref"/>
									</xsd:choice>
								</xsd:sequence>
								<xsd:attribute name="ref" type="xsd:string"/>
								<xsd:attributeGroup ref="beans:beanAttributes"/>
							</xsd:complexType>
						</xsd:element>
						<xsd:element name="id-sql" type="xsd:string" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>Overrides the default SQL statement used to retrieve new event IDs.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
					<xsd:attribute name="batch-size" default="25" type="xsd:long">
						<xsd:annotation>
							<xsd:documentation>Statement batch size for persistence operations, only used if underlying JDBC driver
							supports batching.  Default is 25.</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="mbean-persister">
		<xsd:complexType>
			<xsd:annotation>
				<xsd:documentation source="java:com.mtgi.analytics.jmx.StatisticsMBeanEventPersisterImpl"><![CDATA[
		Stores aggregate event statistics in memory, for access from a JMX console.
		Generally this element will appear as a child of <bt:manager> without an "id", 
		though it is possible to declare it as a top-level bean if you want to inject 
		it into other application beans.
				]]></xsd:documentation>
				<xsd:appinfo>
					<tool:annotation>
						<tool:exports type="com.mtgi.analytics.BehaviorEventPersister"/>
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
			<xsd:complexContent>
				<xsd:extension base="beans:identifiedType">
					<xsd:attribute name="server" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation><![CDATA[Specify a reference to the MBeanServer instance on
							which mbeans should be registered.  Defaults to the MBeanServer used by
							any enclosing <bt:manager> tag, or the platform MBeanServer if not
							enclosed in a <bt:manager> tag.]]></xsd:documentation>
							<xsd:appinfo>
								<tool:annotation kind="ref">
									<tool:expected-type type="javax.management.MBeanServer"/>
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="custom-persister" type="beanType">
		<xsd:annotation>
			<xsd:documentation source="java:com.mtgi.analytics.BehaviorEventPersister"><![CDATA[
	Defines a custom com.mtgi.analytics.BehaviorEventPersister implementation.
	Generally this element will appear as a child of <bt:manager> without an "id", though it is possible to declare it as a top-level
	bean if you want to inject it into other application beans.
			]]></xsd:documentation>
			<xsd:appinfo>
				<tool:annotation>
					<tool:exports type="com.mtgi.analytics.BehaviorEventPersister"/>
				</tool:annotation>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:element name="session-context" type="beanType">
		<xsd:annotation>
			<xsd:documentation source="java:com.mtgi.analytics.SessionContext"><![CDATA[
			Specifies a custom SessionContext implementation, which provides the
			user ID and session ID for logged events.  If no session-context is specified, then
			com.mtgi.analytics.servlet.SpringSessionContext is used if we are determined to be in a
			Spring web application; otherwise com.mtgi.analytics.JAASSessionContext is used.
			
			This element has the syntax of a standard Spring bean definition; e.g. specify "id" and "class"
			attributes, as well as nested <property> elements.]]></xsd:documentation>
			<xsd:appinfo>
				<tool:annotation>
					<tool:exports type="com.mtgi.analytics.SessionContext"/>
				</tool:annotation>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:attribute name="tracking-manager" type="xsd:string">
		<xsd:annotation>
			<xsd:documentation source="java:com.mtgi.analytics.sql.BehaviorTrackingDataSource"><![CDATA[Annotates a Spring bean definition for behavior tracking.
			The value of this attribute should be the ID of the <bt:manager> instance to use,
			or simply "defaultTrackingManager".  Currently this attribute is only supported for 
			DataSource bean definitions.]]></xsd:documentation>
		</xsd:annotation>
	</xsd:attribute>

	<xsd:complexType name="beanType">
		<xsd:complexContent>
			<xsd:extension base="beans:identifiedType">
				<xsd:group ref="beans:beanElements"/>
				<xsd:attributeGroup ref="beans:beanAttributes"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
</xsd:schema>