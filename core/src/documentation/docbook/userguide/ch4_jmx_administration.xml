<chapter id="chapter_jmx_administration">
	<title>JMX Integration</title>
	<para>Beet offers two major JMX features: <xref linkend="section_beet_admin" endterm="beet_admin_title"/> 
	for admininistering beet itself, and <xref linkend="section_beet_statistics" endterm="beet_statistics_title"/> 
	for monitoring the performance of your application.</para>
	<section id="section_beet_admin">
		<title id="beet_admin_title">Beet Administrative MBeans</title>
		<para>To enable JMX administration of beet, add the <literal>register-mbeans</literal> attribute to 
		your <xref linkend="elt_manager" endterm="elt_manager_title" /> tag:
		<example>
			<title>Activating Beet Administration MBeans</title>
			<programlisting><![CDATA[<bt:manager id="myManager"]]><co id="groupName"/><![CDATA[
            application="myapp"]]><co id="domainName"/><![CDATA[
            register-mbeans="true"]]><co id="mbeans"/><![CDATA[
            track-method-expression="execution(* com.mtgi.analytics..*Tracked(..))"/>]]></programlisting>
			<calloutlist>
				<callout arearefs="groupName"><para>The <literal>id</literal> value will be used as the <literal>group</literal> name
				in registered MBeans.  If you don't specify an id, the default value <literal>defaultTrackingManager</literal>
				is used.</para></callout>
				<callout arearefs="domainName"><para>The required <literal>application</literal> value will be used as the <literal>domain</literal> name
				in registered MBeans.</para></callout>
				<callout arearefs="mbeans"><para>"true" enables mbean registration.  This optional attribute is false by default.</para></callout>
			</calloutlist>
		</example>
		</para>
		<para>Following the example above, an MBean named <literal>testApp:package=com.mtgi.analytics,group=myManager,name=BeetManager</literal>
		will be registered with the platform JMX server.  This MBean defines the following attributes and operations:
			<segmentedlist><?dbhtml list-presentation="table"?>
				<title>BeetManager MBean Features</title>
				<segtitle>Name</segtitle>
				<segtitle>Type</segtitle>
				<segtitle>Description</segtitle>
				<seglistitem>
					<seg>Application</seg>
					<seg>attribute</seg>
					<seg>The application name recorded with all events originating in this manager.  This should be
					the same value as the domain name of the MBean.</seg>
				</seglistitem>
				<seglistitem>
					<seg>Suspended</seg>
					<seg>attribute</seg>
					<seg>True if this manager is suspended, false otherwise (see "suspend" and "resume" operations).</seg>
				</seglistitem>
				<seglistitem>
					<seg>EventsPendingFlush</seg>
					<seg>attribute</seg>
					<seg>The number of events which have been recorded but not yet flushed to the persisters.  See
					the "flush" operation.</seg>
				</seglistitem>
				<seglistitem>
					<seg>flush</seg>
					<seg>operation</seg>
					<seg>Flush all completed events to the persisters.  This is normally done automatically according
					to the flush interval (default 5 minutes) or when the flush threshold is exceeded (default 100 events), 
					whichever comes first.  Manual flush is useful if you don't want to wait until the next natural flush
					to analyze event data.  The EventsPendingFlush attribute value will tell you how many events have
					been recorded but not yet flushed to the persisters.</seg>
				</seglistitem>
				<seglistitem>
					<seg>suspend</seg>
					<seg>operation</seg>
					<seg>Suspend recording of events.  No events captured while suspect will be persisted.</seg>
				</seglistitem>
				<seglistitem>
					<seg>resume</seg>
					<seg>operation</seg>
					<seg>Resume recording of events if suspended.  If not suspended, this operation has no effect.</seg>
				</seglistitem>
			</segmentedlist>
		</para>
		<para>If you are using <xref linkend="elt_xml_persister" endterm="elt_xml_persister_title" /> (the default), 
		another MBean called <literal>BeetLog</literal> is also registered for log control.
		Following the example above, this MBean will be named <literal>testApp:package=com.mtgi.analytics,group=myManager,name=BeetLog</literal>.
		BeetLog supports the following attributes and operations:
			<segmentedlist><?dbhtml list-presentation="table"?>
				<title>BeetLog MBean Features</title>
				<segtitle>Name</segtitle>
				<segtitle>Type</segtitle>
				<segtitle>Description</segtitle>
				<seglistitem>
					<seg>Binary</seg>
					<seg>attribute</seg>
					<seg><para>If true, binary XML (FastInfoSet) data is written to the log file.  If false, plain UTF-8
					text XML is written.  Binary XML is recommended for production systems; see <xref linkend="section_log_analysis"/>
					for information on manipulating binary XML log data.</para>
					<para>Changes to the value of this attribute only take affect after the next log rotation.</para></seg>
				</seglistitem>
				<seglistitem>
					<seg>Compress</seg>
					<seg>attribute</seg>
					<seg><para>If true, log file data is GZIP compressed.  Compression can be enabled separately or in combination with
					<literal>Binary</literal> logging.  Compressed logging is recommended for production systems.</para>
					<para>Changes to the value of this attribute only take affect after the next log rotation.</para></seg>
				</seglistitem>
				<seglistitem>
					<seg>FileSize</seg>
					<seg>attribute</seg>
					<seg>The length, in bytes, of the active log file.</seg>
				</seglistitem>
				<seglistitem>
					<seg>rotateLog</seg>
					<seg>operation</seg>
					<seg>Force a log rotation.  This operation is normally performed automatically, every day at midnight by default.
					The return value is the absolute path to the newly created log archive file.  If you manually rotate a log file,
					it will probably be useful to first execute the <literal>flush</literal> operation on the <literal>BeetManager</literal>
					MBean to make sure all of the event data in memory has been flush.</seg>
				</seglistitem>
			</segmentedlist>
			<mediaobject>
				<imageobject><imagedata fileref="images/jconsole-mbeans.png" format="PNG" align="center"/></imageobject>
				<textobject><phrase>Beet Administrative MBeans</phrase></textobject>
				<caption><para>JConsole 6 with Beet MBeans</para></caption>
			</mediaobject>
		</para>
	</section>
	<section id="section_beet_statistics">
		<title id="beet_statistics_title">Beet Statistical MBeans</title>
		<para>Beet records very detailed data (at the single event level) via the xml or jdbc peristers.
		If you want access to higher-level aggregate statistics at runtime, without necessitating direct access to
		the logs, you can configure the <xref linkend="elt_mbean_persister" endterm="elt_mbean_persister_title"/>.
		This is also a useful strategy for integrating beet statistics with system monitoring tools that support JMX.
		<example>
			<title>Activating Beet Statistical MBeans</title>
			<programlisting><![CDATA[<bt:manager application="myapp"]]><co id="domainName"/><![CDATA[
            track-method-expression="execution(* com.mtgi.analytics..*Tracked(..))">
               <bt:persister-chain>]]><co id="persisterChain"/><![CDATA[
                  <bt:xml-persister/>
                  <bt:mbean-persister/>
               </bt:persister-chain>
</bt:manager>]]></programlisting>
			<calloutlist>
				<callout arearefs="domainName"><para>Like the <xref linkend="section_beet_admin" endterm="beet_admin_title"/>, 
				the <literal>application</literal> attribute value is used as the domain name of statistical MBeans.</para></callout>
				<callout arearefs="persisterChain"><para>While you can use the <xref linkend="elt_mbean_persister" endterm="elt_mbean_persister_title"/>
				by itself, it is recommended that you use it as part of a <xref linkend="elt_persister_chain" endterm="elt_persister_chain_title"/>
				so that your data is saved for later, deeper analysis.</para></callout>
			</calloutlist>
		</example>
		</para>
		<para>When the mbean persister is registered, a single MBean is created in your application domain
		for each distinct type of event.  MBeans are also named hierarchically according to their parent events.
		For example, statistics for the Java method <literal>MyClass.myMethod</literal> invoked from the 
		HTTP request <literal>/myApp/save.do</literal> are tracked separately than statistics for the same
		method when invoked from the HTTP request <literal>/myApp/delete.do</literal>.  All statistics MBeans support
		the following operations and attributes:
			<segmentedlist><?dbhtml list-presentation="table"?>
				<title>Beet Statistics MBean Features</title>
				<segtitle>Name</segtitle>
				<segtitle>Type</segtitle>
				<segtitle>Description</segtitle>
				<seglistitem>
					<seg>Count</seg>
					<seg>attribute</seg>
					<seg>The number of times this event has occurred.</seg>
				</seglistitem>
				<seglistitem>
					<seg>ErrorCount</seg>
					<seg>attribute</seg>
					<seg>The number of times this event ended in error.</seg>
				</seglistitem>
				<seglistitem>
					<seg>AverageTime</seg>
					<seg>attribute</seg>
					<seg>The average execution time, in the selected unit.</seg>
				</seglistitem>
				<seglistitem>
					<seg>MaxTime</seg>
					<seg>attribute</seg>
					<seg>The maximum execution time, in the selected unit.</seg>
				</seglistitem>
				<seglistitem>
					<seg>MinTime</seg>
					<seg>attribute</seg>
					<seg>The minimum execution time, in the selected unit.</seg>
				</seglistitem>
				<seglistitem>
					<seg>StandardDeviation</seg>
					<seg>attribute</seg>
					<seg>The standard deviation from the mean, in the selected unit.</seg>
				</seglistitem>
				<seglistitem>
					<seg>LastInvocation</seg>
					<seg>attribute</seg>
					<seg>The most recent date and time at which this event occurred.</seg>
				</seglistitem>
				<seglistitem>
					<seg>Units</seg>
					<seg>attribute</seg>
					<seg>The unit of measure for max, min, average, and stddev.  
					Valid values are seconds, milliseconds, and nanoseconds.
					Defaults to milliseconds if unspecified.</seg>
				</seglistitem>
				<seglistitem>
					<seg>reset</seg>
					<seg>operation</seg>
					<seg>Reset statistics for this type of event.</seg>
				</seglistitem>
			</segmentedlist>
			<mediaobject>
				<imageobject><imagedata fileref="images/jconsole-statistics-mbeans.png" format="PNG" align="center"/></imageobject>
				<textobject><phrase>Beet Statistical MBeans</phrase></textobject>
				<caption><para>JConsole 6 with Beet Statistical MBeans.  Note the hierarchical grouping of events,
				so that we can quantify the impact of jdbc updates on the method that triggered them, and in turn
				the impact of that method on the URI that invoked it.</para></caption>
			</mediaobject>
		</para>
	</section>
</chapter>