<chapter id="chapter_configuration">
   <title>Configuration Reference</title>

   <para>Most configuration is accomplished by importing the custom config namespace into
   your Spring bean definition file, and then using it to define the appropriate elements.
   You can find probably find an example in <xref linkend="config_examples"/> and then customize
   it to suit your needs using the schema reference in <xref linkend="config_schema"/>.</para>
   
   <para>Unless otherwise specified, all schema elements support the "id" attribute for injection into
   other Spring beans, in addition to those listed here.</para>
   
   <section id="config_examples">
      <title>Configuration Examples</title>
      <para>The simplest example in <xref linkend="chapter_getting_started"/> should suit most applications.
      Here are some common (and less common) customizations:</para>
		<example>
			<title>Store performance logs in the Tomcat logs directory</title>
			<programlisting><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:bt="http://www.mantis-tgi.com/schema/bt/1.1"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
          http://www.mantis-tgi.com/schema/bt/1.1        http://www.mantis-tgi.com/schema/bt/mtgi-bt-1.1.xsd">

   <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>]]><co id="placeholder"/><![CDATA[
   
   <bt:manager application="myapp">
      <bt:xml-persister file="${catalina.home}/logs/myapp-beet.xml"/>]]><co id="log-location"/><![CDATA[
   </bt:manager>]]></programlisting>
			<calloutlist>
				<callout arearefs="placeholder"><para>This spring utility class is required to use
				system properties like catalina.home in your Spring configuration.</para></callout>
				<callout arearefs="log-location"><para>Tomcat defines the catalina.home system property, which
				is useful for specifying server-relative paths in the configuration.
				The file extension listed here will be replaced at runtime with one appropriate
				to the log settings; for example, ".gz" is appended if log compression is enabled 
				(which is the default).</para></callout>
			</calloutlist>
		</example>
		
		<example>
			<title>Monitor application performance from a JMX console</title>
			<programlisting><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:bt="http://www.mantis-tgi.com/schema/bt/1.1"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
          http://www.mantis-tgi.com/schema/bt/1.1        http://www.mantis-tgi.com/schema/bt/mtgi-bt-1.1.xsd">

   <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>]]><co id="placeholder"/><![CDATA[
   
   <bt:manager application="myapp">
      <bt:persister-chain>
         <bt:xml-persister/>]]><co id="otherPersister"/><![CDATA[
         <bt:mbean-persister/>]]><co id="mbeanPersister"/><![CDATA[
      </bt:persister-chain>
   </bt:manager>]]></programlisting>
			<calloutlist>
				<callout arearefs="otherPersister"><para>You can use mbean-persister by itself,
				but we recommend using it in combination with another persister that actually
				stores the data for later analysis.</para></callout>
				<callout arearefs="mbeanPersister"><para><xref linkend="elt_mbean_persister" endterm="elt_mbean_persister_title"/> 
				enables export of basic statistics mbeans to a JMX server.</para></callout>
			</calloutlist>
		</example>

		<example>
			<title>Use a custom SessionContext implementation to specify user IDs</title>
			<programlisting><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:bt="http://www.mantis-tgi.com/schema/bt/1.1"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
          http://www.mantis-tgi.com/schema/bt/1.1        http://www.mantis-tgi.com/schema/bt/mtgi-bt-1.1.xsd">
		
   <bt:manager application="myapp">
      <bt:session-context class="com.me.MySessionContextImpl]]><co id="custom-sc"/><![CDATA["/>
   </bt:manager>]]></programlisting>
			<calloutlist>
				<callout arearefs="custom-sc"><para>This class must implement 
				<ulink url="../../api/com/mtgi/analytics/SessionContext.html">com.mtgi.analytics.SessionContext</ulink>.
				The <xref linkend="elt_session_context" endterm="elt_session_context_title"/> element is otherwise
				a normal Spring bean definition, and may include nested property elements and so on.</para></callout>
			</calloutlist>
		</example>
		
		<example>
			<title>Send tracking data for different packages to different log files</title>
			<programlisting><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:bt="http://www.mantis-tgi.com/schema/bt/1.1"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
          http://www.mantis-tgi.com/schema/bt/1.1        http://www.mantis-tgi.com/schema/bt/mtgi-bt-1.1.xsd">
		
   <bt:config>
      <bt:manager id="loggerA]]><co id="multiple-managers"/><![CDATA[" application="myapp"
                  track-method-expression="execution(* com.mtgi.package_a..*Tracked(..))">
         <bt:xml-persister file="log-a.xml"/>
      </bt:manager>
      <bt:manager id="loggerB" application="myapp"
                  track-method-expression="execution(* com.mtgi.package_b..*Tracked(..))">
         <bt:xml-persister file="log-b.xml"/>]]><co id="multiple-executors"/><![CDATA[
      </bt:manager>
   </bt:config>]]></programlisting>
			<calloutlist>
				<callout arearefs="multiple-managers"><para>When specifying multiple &lt;bt:manager&gt; instances
				in a single application, you must provide unique IDs for each.</para></callout>
				<callout arearefs="multiple-executors"><para>An important consequence of having multiple
				managers in a single application is that each will define a private thread pool for persistence
				operations.  If you want to have them all share a thread pool (which is not a bad idea), 
				use the <xref linkend="elt_manager" endterm="elt_manager_title"/> attribute "task-executor".</para></callout>
			</calloutlist>
		</example>

		<example>
			<title>Integrate beet with other AOP advice</title>
			<programlisting><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:bt="http://www.mantis-tgi.com/schema/bt/1.1"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
          http://www.springframework.org/schema/tx    http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
          http://www.mantis-tgi.com/schema/bt/1.1        http://www.mantis-tgi.com/schema/bt/mtgi-bt-1.1.xsd
          http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">
		
   <bt:manager/>]]><co id="no-expression"/><![CDATA[
        
   <bt:advice id="btAdvice"/>]]><co id="advice-manager"/><![CDATA[
   <tx:advice id="txAdvice"/>
                
   <aop:config>
      <aop:pointcut id="trackedOperations" expression="execution(* com.mtgi..*Service(..))" />
      <aop:advisor id="behaviorTrackingAdvisor" advice-ref="btAdvice" pointcut-ref="trackedOperations" order="1"/>
      <aop:advisor id="transactionAdvisor" advice-ref="txAdvice" pointcut-ref="trackedOperations" order="2"/>]]><co id="advice-ordering"/><![CDATA[
   </aop:config>]]></programlisting>
			<calloutlist>
				<callout arearefs="no-expression"><para>We have intentionally not specified a pointcut expression
				here, since we're going to be including that with the rest of our AOP config below.</para></callout>
				<callout arearefs="advice-manager"><para>If you want to associate behavior tracking advice
				with a manager other than the default instance, you can use the "tracking-manager" attribute to do so.</para></callout>
				<callout arearefs="advice-ordering"><para>By specifying a lower order for the behavior tracking advice, 
				we've ensured that behavior tracking metrics include time spent on transaction synchronization.</para></callout>
			</calloutlist>
		</example>

		<example>
			<title>Register Beet JMX MBeans</title>
			<programlisting><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:bt="http://www.mantis-tgi.com/schema/bt/1.1"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
          http://www.mantis-tgi.com/schema/bt/1.1        http://www.mantis-tgi.com/schema/bt/mtgi-bt-1.1.xsd">
		
   <bt:manager application="myapp" register-mbeans="true"]]><co id="jmx-naming"/><![CDATA[/>
		]]></programlisting>
			<calloutlist>
				<callout arearefs="jmx-naming"><para>This attribute exposes MBeans for both
				the Beet manager bean and the Beet logging bean.  Both of these MBeans are
				contained in a domain with the application name; in this case, "myapp".</para>
				<para>If you want more fine-grained control over which beans are registered,
				which MBean server registers them, or how they are named, you can use Spring's
				standard JMX support classes to accomplish this.</para></callout>
			</calloutlist>
		</example>
   </section>
  
   <section id="config_web">
      <title>The Behavior Tracking Servlet Filter</title>
      <para>As mentioned in <xref linkend="chapter_getting_started"/>, HTTP request tracking can be enabled either
      in spring configuration via inclusion of <xref linkend="elt_http_requests" endterm="elt_http_requests_title"/>
      or as a servlet filter.  The primary difference is that the serlvet filter can record response codes and error
      messages in the event log.
		<example>
			<title>Defining BehaviorTrackingFilter in web.xml</title>
			<programlisting><![CDATA[<?xml version="1.0"?>
			
<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
         version="2.4">
         
   ...
   <!-- normal web.xml configuration up to this point -->
   
   <!-- enable behavior tracking for servlet requests -->
   <filter>
      <filter-name>trackingFilter</filter-name>
      <filter-class>com.mtgi.analytics.servlet.BehaviorTrackingFilter</filter-class>
      <init-param>
         <param-name>com.mtgi.analytics.parameters.include</param-name>]]><co id="filter-params"/><![CDATA[
         <param-value>dispatch</param-value>
      </init-param>
      <init-param>
         <param-name>com.mtgi.analytics.parameters.name</param-name>]]><co id="filter-name"/><![CDATA[
         <param-value>dispatch</param-value>
      </init-param>
      <init-param>
         <param-name>com.mtgi.analytics.servlet.event</param-name>]]><co id="filter-type"/><![CDATA[
         <param-value>http-request</param-value>
      </init-param>
      <init-param>
         <param-name>com.mtgi.analytics.manager</param-name>]]><co id="filter-manager"/><![CDATA[
         <param-value>defaultTrackingManager</param-value>
      </init-param>
   </filter>

   <filter-mapping>
      <filter-name>trackingFilter</filter-name>
      <servlet-name>action</servlet-name>
      <dispatcher>REQUEST</dispatcher>
   </filter-mapping>
             
</web-app>]]></programlisting>
			<calloutlist>
				<callout arearefs="filter-params"><para>An optional comma-separated list of parameters to include
				in the event data logs.  If unspecified, all parameters are logged.</para></callout>
				<callout arearefs="filter-name"><para>An optional comma-separated list of parameters to include
				with the request URI in the event name.  If unspecified, no parameters are included in the name.</para></callout>
				<callout arearefs="filter-type"><para>The value to specify for "event-type" in the event data
				logs.  Primarily useful if you want to define several different filters and be able to identify
				which generated each event.  Defaults to "http-request" if unspecified.</para></callout>
				<callout arearefs="filter-manager"><para>The Spring bean name of the BehaviorTrackingManager used
				to log events.  Defaults to "defaultTrackingManager" if unspecified (if you only have one &lt;bt:manager&gt;
				tag in your Spring configuration, you should not need this parameter).</para></callout>
			</calloutlist>
		</example>
      </para>
   </section>
   
   &chap3_schema; 
   
</chapter>