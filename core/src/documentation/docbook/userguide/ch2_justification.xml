<chapter id="chapter_justification">
	<title>Justification</title>
	<para>It is hard to predict how users will engage your application before it hits production.  
	You can invest much or little in your attempts to 
	predict demand, but in either case your best educated guess cannot dictate  
	the future.  If you can avoid performance problems on first release, monitoring  
	is paramount to ensure that things stay under control  as users find new ways to  
	torture your application.  If you do have problems on initial deployment,  
	monitoring is paramount to finding and addressing a problem quickly. In any case,  
	production monitoring is required.</para>
	
	<section>
		<title>Existing Tools and Methods</title> 

		<para>There are many powerful tools available to monitor any modern Java application.  Beet 
		is designed to augment, not replace, the information that these tools provide.  What's most important is that you 
		actually measure your system to understand where the problems lie.  You can verify
		whether a candidate fix improves the readings you get on these metrics.
		It also enables you to devise tests that load the system in a way that
		resembles the actual production load patterns, rather than having to
		rely on expectations and guesses.</para>
		
		<section>
			<title>System Resource Monitoring</title>
			<para>System resource monitoring tools are widely available and do not require you 
			to make any special considerations in your application.  For example, most modern 
			Windows systems have <ulink url="http://technet.microsoft.com/en-us/library/cc749115.aspx">Performance Monitor</ulink>, 
			and most Unix systems will include some 
			variant of <ulink url="http://pagesperso-orange.fr/sebastien.godard/documentation.html">sar</ulink>. In either case, 
			you should be able to identify bottlenecks at the 
			resource level (disk, memory, CPU, network).  If your system is simply being asked 
			to do too much with the tools given, and you can address bottlenecks with better hardware, that's excellent.</para>
			<para>If you are having application responsiveness problems and your resources are  
			underutilized, you can't hope to get much more out of your resource monitors and must 
			dig deeper.  If your system is overutilized with two users logging in and nothing more, you must dig 
			deeper.  In short, you should anticipate a need for deeper visibility into your application 
			than what resource monitoring tools alone can provide.</para>
		</section>
		
		<section>
			<title>JMX Monitoring</title>
			<para>Modern Java application servers provide a wealth of information to JMX clients 
			(<ulink url="http://java.sun.com/developer/technicalArticles/J2SE/jconsole.html">jconsole</ulink>, 
			<ulink url="http://mc4j.org">MC4J</ulink>). 
			If your application is overpowering the CPU, you can quickly identify which threads 
			are eating your processor and what code they are executing while they are doing it. 
			You can view heap memory use statistics, identify deadlocked threads, and usually  
			(depending on application server) exercise some control over user sessions.</para>
			<para>A significant limitation of JMX monitoring tools is that it is difficult to perform 
			post-mortem analysis after your system has become unresponsive.  If your application 
			is leaking memory, or pegs your processor, users of JMX clients are frequently 
			as out-of-luck as users of your application. Some IT departments will consider (not entirely without merit) JMX  
			access a security risk and will refuse to activate it.</para>
		</section>

		<section>
			<title>Access Logging</title>
			<para>All major web servers will provide some kind of configurable 
			<ulink url="http://httpd.apache.org/docs/2.0/logs.html#accesslog">access logging</ulink>, 
			usually in the style of the <ulink url="http://httpd.apache.org/">Apache web server</ulink>.
			An access log may include which URL was requested, 
			when the request was made, which user made the request, a session ID associated with the request,  
			how long the server spent processing the request, how large the response was, 
			and whether the processing resulted in any errors.  The access log is the primary data 
			source for many user analytics packages.  If you are writing a web application, access 
			logging is a powerful tool for understanding how users are accessing your application 
			and how their behavior changes over time.</para>
			<para>Many applications implement custom authentication methods, without integrating these 
			methods into the container's standard authentication methods.  Whether or not this is a  
			good idea is a separate issue, but at the very least these applications lose association  
			between a specific user account and the info in the access logs.  Therefore you can only understand  
			how your users behave as an entire community, not as individuals or classes. You can make inferences 
			from session ID and unique IP address, but you generally won't know which roles
			are attached to which requests.</para>
			<para>Even in cases where you know which user caused a request, access logs do not directly tie requests to resource utilization 
			and system behavior. Why did the request take so long to process?  Why is the response 
			so large?  What parameters were provided with the request?  You may have separate logging 
			of database activity or maybe even method calls, but you generally must correlate events using 
			timestamps.  If you have a high volume application in which many events often happen within 
			the same second, this is actually impossible to do with any reasonable accuracy.</para>
		</section>
		
		<section>
			<title>Logging Toolkits</title>
			<para>The use of toolkit logging 
			(<ulink url="http://java.sun.com/j2se/1.4.2/docs/guide/util/logging/">Java Logging API</ulink>, 
			<ulink url="http://commons.apache.org/logging/">Apache Commons Logging</ulink>, 
			<ulink url="http://logging.apache.org/log4j/1.2/index.html">log4j</ulink>) is widely practiced 
			in the global Java development community.  Logging statements allow you to select which 
			information will be most useful for your own troubleshooting. 
			Logging toolkits are highly configurable and allow you to dynamically increase 
			the volume of information in areas where trouble is suspected.</para>
			<para>One major limitation of toolkits is that high volume logging is expensive -- it fills 
			up your disk and takes processor time away from your application.  Learning when and what to log 
			is an art that most programmers acquire naturally and will not be discussed here.  But even 
			the most skillful programmer will frequently experience the logging hole: information 
			seems to pour out of every part of the system except the one that is behaving badly. 
			After all, if you knew it was going to be a problem, you wouldn't have written it that way, 
			right?  The proactive, compile-time nature of logging is its essential weakness. Zealously adding a logging 
			statement at every conditional branch, at every method open and close, and at every object 
			instantiation and finalization is time-consuming, error-prone, erodes application 
			performance, decreases code legibility, and generates log noise that distracts from 
			the truly valuable information you are logging. A unique frustration of troubleshooting a flagging system 
			is discovering that a critical stacktrace has been rotated out of existence by 
			a debug message that is being logged every 3 seconds.  Of course you can then tune 
			your configuration appropriately, but at that point you must wait for your error to happen again. Even so you 
			can't add logging statements without a recompile / redeploy, which in tightly 
			controlled environments may be difficult or entirely forbidden.</para>
			<para>Assume that you have precisely predicted your logging needs, and have a calibrated 
			configuration that tells you exactly what your system is doing. Still, like access logging, you must often do  
			extra work to infer relationships between the toolkit logging and 
			other streams of information (database logs, access logs, performance monitors).</para>
		</section>
		
		<section>
			<title>Profilers, Performance Logging</title>
			<para>The Java virtual machine now hosts a <ulink url="http://java.sun.com/docs/performance/">rich toolset</ulink> 
			for logging performance data about an application -- method calls, class construction and destruction, garbage
			collector behavior.  Profiling tools like <ulink url="http://www.eclipse.org/tptp/">Eclipse TPTP</ulink> 
			allow you to connect to a virtual machine and mine this data in exhaustive detail.</para>
			<para>This is excellent in a test environment; but at time of this writing and for a long 
			time before, a profiler is not a tool that can be easily used in production.  The 
			impact on system responsiveness is massive, and interference from monitoring can 
			obscure the source of the problem.  Profilers are generally a &quot;last mile&quot; tool -- 
			you've identified the problem scenario (which users, what they are doing, when), 
			can reproduce the problem in a controlled environment, and want to know what the 
			problem is at the level of bits and booleans.  Even less invasive tools like  
			verbose GC and allocation logging must be used with care (usually reactively), 
			and again require tedious correlation analysis with other data sources to arrive 
			at meaningful results.</para>
		</section>
	</section>
	
	<section>
		<title>Where beet Fits</title>
		<para>From the above discussion, there are some obvious needs not <emphasis>easily</emphasis> met by existing tools:
		<orderedlist>
		<listitem><para>Easy addition of instrumentation at runtime, not compile-time</para></listitem>
		<listitem><para>Logging that is both detailed (method-call granularity) and low-overhead, so that it 
		can <emphasis>always</emphasis> be active, even in production</para></listitem>
		<listitem><para><emphasis role="bold">most importantly</emphasis>, strong correlation of events across multiple layers of  
		a system, so that you know which request triggered that expensive SQL statement without needing to infer it.</para></listitem>
		</orderedlist>
		</para>
		<para>beet aims to balance these needs against each other, so that you can react with more  
		focus to production problems, and so that you can proactively understand how users behave as you  
		consider ways to grow your system. The ideal use of beet combines it with judicious toolkit 
		logging, system resource monitoring, and JMX console access to provide you with a profoundly detailed portrait 
		of your live production system.</para>
		
		<section>
			<title>Why Spring?</title>
			<para>The first release of beet targets <ulink url="http://www.springframework.org">Spring</ulink> 
			applications exclusively.  This is mostly because of Spring's 
			excellent runtime AOP support, which is critical to beet's aim of zero code modification.
			Spring is also unusual in being of generally high quality, completely free, and wildly popular.  Finally,
			many other important frameworks make Spring compatibility a priority.</para>
			<para>Still, the core components of beet are not tightly coupled to Spring and support for other
			deployment scenarios is conceivable.  Deployment in a pure EJB3 container is a likely target for a 
			future release.</para>
		</section>
		
		<section>
			<title>Commercial and Open-Source Alternatives</title>
			<para>There are many high-quality commercial alternatives.  If closed-source and/or commercial tools 
			are an option for you, make sure you evaluate a few.  We won't specifically endorse any of them here, 
			however :).  Generally the benefit of a commercial alternative will be in the out-of-the-box data 
			analysis tools; with our library, you mostly get the data, and what you do with it is your business. 
			Many portal application servers (Sun Glassfish and BEA WebLogic come to mind) have some behavior 
			tracking features; make sure you consider the capabilities of your target platform.  Even if you have 
			some tools available, beet may offer you something in simplicity, flexibility, and performance.</para>
			
			<para>There is a growing body of excellent open source projects out there geared toward 
			gathering performance metrics and monitoring a production system.  You may want to evaluate:
			<itemizedlist>
				<listitem><para><ulink url="http://jamonapi.sourceforge.net/">JAMon</ulink></para></listitem>
				<listitem><para><ulink url="http://perf4j.codehaus.org/">Perf4j</ulink></para></listitem>
				<listitem><para><ulink url="https://helios.dev.java.net/">Helios</ulink></para></listitem>
				<listitem><para><ulink url="https://sourceforge.net/projects/jmeasurement2">jmeasurement</ulink></para></listitem>
			</itemizedlist>
			and there are many others.  Each tool has advantages and drawbacks.  Beet is focused on delivering:
			<itemizedlist>
				<listitem><para><emphasis>Single event granularity</emphasis>.  Many tools take the approach of
				statistical aggregation to monitor quality-of-service.  While you can use beet in this way, beet 
				also maintains detailed information about individual executions (method calls, HTTP requests, SQL statements)
				and how those executions are nested for more effective post-mortem analysis of system outages.  
				This configurable level of detail includes parameter values and user names.</para></listitem>
				<listitem><para><emphasis>Deploy-time installation</emphasis>.  Beet is designed for use in existing
				production applications, without necessitating a recompile.</para></listitem>
				<listitem><para><emphasis>Centralized configuration</emphasis>.  All aspects of beet configuration
				can be centralized in a single Spring configuration file, usually in 3-4 lines of simple markup.</para></listitem>
				<listitem><para><emphasis>Application scope</emphasis>.  Beet does not require manipulation of the JVM
				or its runtime parameters, so you can instrument an application when you don't have strong control of
				the production environment.</para></listitem>
				<listitem><para><emphasis>Integration</emphasis>.  Beet is designed for high-performance, meaningful data capture.
				It exposes data through JMX or XML to integrate with other popular monitoring and aggregation tools, rather 
				than providing monolithic data analysis services.</para></listitem>
			</itemizedlist>
			</para>
			
			<section>
				<title>Related Tools</title>
				<para>As described in <xref linkend="chapter_jmx_administration"/>, beet can export mbeans for
				integration with JMX monitoring tools.  Besides jconsole (which ships standard with an SDK install),
				some open source tools worth considering in this role:
				<itemizedlist>
					<listitem><para><ulink url="http://www.hyperic.com/">Hyperic HQ</ulink></para></listitem>
					<listitem><para><ulink url="http://mc4j.org/confluence/display/mc4j/Home">MC4J</ulink></para></listitem>
					<listitem><para><ulink url="http://www.jmanage.org/">jmanage</ulink></para></listitem>
				</itemizedlist>
				You should also check out <ulink url="http://messadmin.sourceforge.net/">MessAdmin</ulink> for examining
				and administering session state in JEE applications.</para>
			</section>
			
		</section>
	</section>
</chapter>
